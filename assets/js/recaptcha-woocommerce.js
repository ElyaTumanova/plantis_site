(function () {
  // ===== CONFIG =====
  const CONFIG = {
    siteKey: window.recaptchaWoo?.siteKey || "6LcP2rIrAAAAAGxrNXEe4AP0rC_fXZ7v7vKVr4wF",
    debug: window.recaptchaWoo?.debug ?? false,
    // –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã, –≤–Ω—É—Ç—Ä–∏ –∫–æ—Ç–æ—Ä—ã—Ö –º–æ–≥—É—Ç –ø–æ—è–≤–ª—è—Ç—å—Å—è —Ñ–æ—Ä–º—ã:
    containers: [
      "#customer_login",           // /my-account
      ".login-popup",              // –ø–æ–ø–∞–ø –≤—Ö–æ–¥–∞
      ".register-popup"            // –ø–æ–ø–∞–ø —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    ],
    formSelectors: [
      "form.woocommerce-form-login.login",
      "form.woocommerce-form-register.register",
      "form.woocommerce-form.lost_reset_password"
    ],
    tokenTtlMs: 100 * 1000,        // —Å—á–∏—Ç–∞–µ–º —Ç–æ–∫–µ–Ω ¬´—Å–≤–µ–∂–∏–º¬ª 100 —Å–µ–∫ (~< 2 –º–∏–Ω –∂–∏–∑–Ω–∏)
    actions: {
      idle: "woocommerce",
      submit: "woocommerce_submit",
      modal: "woocommerce_modal"
    }
  };

  const $$ = (sel, root) => Array.from((root || document).querySelectorAll(sel));
  const getForms = (root) =>
    CONFIG.formSelectors.map(s => $$(s, root)).flat();

  const log = (...args) => { if (CONFIG.debug) console.log("[reCAPTCHA]", ...args); };

  // --- –∫—ç—à —Ç–æ–∫–µ–Ω–∞ ---
  const TokenCache = {
    token: null,
    action: null,
    ts: 0,
    fresh() {
      return this.token && (Date.now() - this.ts) < CONFIG.tokenTtlMs;
    },
    set(token, action) {
      this.token = token; this.action = action; this.ts = Date.now();
    },
    get() { return this.token; }
  };

  // --- –±–µ–∑–æ–ø–∞—Å–Ω—ã–π execute —Å –æ–∂–∏–¥–∞–Ω–∏–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ ---
  let running = false; // –∑–∞—â–∏—Ç–∞ –æ—Ç –≥–æ–Ω–æ–∫
  function obtainToken(action, cb) {
    const run = () => {
      if (running) { // —Å–ª–∏–≤–∞–µ–º —á–∞—Å—Ç—ã–µ –ø–æ–≤—Ç–æ—Ä—ã
        log("‚è≥ execute —É–∂–µ –∏–¥—ë—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç");
        return;
      }
      running = true;
      grecaptcha.execute(CONFIG.siteKey, { action }).then(token => {
        TokenCache.set(token, action);
        log(`‚úÖ token(${action}) –ø–æ–ª—É—á–µ–Ω`);
        running = false;
        cb && cb(token);
      }).catch(err => {
        running = false;
        log("‚ùå –æ—à–∏–±–∫–∞ execute:", err);
      });
    };

    if (window.grecaptcha && typeof grecaptcha.ready === "function") {
      grecaptcha.ready(run);
    } else {
      // —Ä–µ–¥–∫–∏–π —Å–ª—É—á–∞–π: api.js –µ—â—ë –Ω–µ –≥–æ—Ç–æ–≤
      let tries = 0;
      const t = setInterval(() => {
        if (window.grecaptcha && typeof grecaptcha.ready === "function") {
          clearInterval(t); grecaptcha.ready(run);
        } else if (++tries > 75) { clearInterval(t); log("‚õî –Ω–µ –¥–æ–∂–¥–∞–ª–∏—Å—å grecaptcha"); }
      }, 200);
    }
  }

  function ensureHiddenInput(form) {
    if (!form.querySelector('input[name="g-recaptcha-response"]')) {
      const inp = document.createElement("input");
      inp.type = "hidden";
      inp.name = "g-recaptcha-response";
      form.appendChild(inp);
      log("Ôºã –¥–æ–±–∞–≤–∏–ª–∏ —Å–∫—Ä—ã—Ç–æ–µ –ø–æ–ª–µ", form);
    }
  }

  function setTokenToForms(token, root) {
    getForms(root || document).forEach(f => {
      const inp = f.querySelector('input[name="g-recaptcha-response"]');
      if (inp) inp.value = token;
    });
  }

  // --- –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ñ–æ—Ä–º—ã (–ª–µ–Ω–∏–≤–æ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–∏) ---
  function prepareForm(form) {
    if (form.__recaptchaPrepared) return;
    ensureHiddenInput(form);

    // –ü—Ä–∏ –ø–µ—Ä–≤–æ–º —Ñ–æ–∫—É—Å–µ –Ω–∞ –ª—é–±–æ–º –ø–æ–ª–µ ‚Äî –µ—Å–ª–∏ –Ω–µ—Ç —Å–≤–µ–∂–µ–≥–æ —Ç–æ–∫–µ–Ω–∞, –∑–∞–ø—Ä–æ—Å–∏–º
    const focusHandler = () => {
      if (!TokenCache.fresh()) {
        log("üëÄ –ø–µ—Ä–≤—ã–π —Ñ–æ–∫—É—Å ‚Üí –±–µ—Ä—ë–º token(idle)");
        obtainToken(CONFIG.actions.idle, (t) => setTokenToForms(t, form));
      }
      form.removeEventListener("focusin", focusHandler);
    };
    form.addEventListener("focusin", focusHandler, { once: true });

    // –ü–µ—Ä–µ–¥ —Å–∞–±–º–∏—Ç–æ–º ‚Äî –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ —Å–≤–µ–∂–∏–π —Ç–æ–∫–µ–Ω
    form.addEventListener("submit", (e) => {
      if (TokenCache.fresh()) {
        const t = TokenCache.get();
        setTokenToForms(t, form);
        log("üöÄ submit —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–º token");
        return; // –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–≤–µ–∂–∏–π –∫—ç—à
      }
      // –µ—Å–ª–∏ —Ç–æ–∫–µ–Ω –ø—Ä–æ—Ç—É—Ö ‚Äî —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –ø–æ–ª—É—á–∏–º –Ω–æ–≤—ã–π –∏ –¥–∞–¥–∏–º —Ñ–æ—Ä–º–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å—Å—è —á—É—Ç—å –ø–æ–∑–∂–µ
      e.preventDefault();
      log("‚ôªÔ∏è submit ‚Üí —Ç–æ–∫–µ–Ω –ø—Ä–æ—Å—Ä–æ—á–µ–Ω, –æ–±–Ω–æ–≤–ª—è–µ–º");
      obtainToken(CONFIG.actions.submit, (t) => {
        setTokenToForms(t, form);
        // –ø–æ–≤—Ç–æ—Ä–Ω–æ —Å–∞–±–º–∏—Ç–∏–º –ø–æ—Å–ª–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ç–æ–∫–µ–Ω–∞
        form.submit();
      });
    }, true);

    form.__recaptchaPrepared = true;
  }

  // --- –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–Ω—É—Ç—Ä–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ ---
  function initIn(root) {
    getForms(root).forEach(prepareForm);
  }

  // --- –Ω–∞–±–ª—é–¥–∞–µ–º —Ç–æ–ª—å–∫–æ –∑–∞ –Ω—É–∂–Ω—ã–º–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞–º–∏, –±–µ–∑ total-subtree ---
  function setupObservers() {
    CONFIG.containers.forEach(sel => {
      $$(sel).forEach(container => {
        initIn(container); // –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
        const obs = new MutationObserver((muts) => {
          let changed = false;
          muts.forEach(m => {
            if (m.type === "childList" && m.addedNodes && m.addedNodes.length) {
              m.addedNodes.forEach(n => {
                if (n.nodeType === 1 && (n.matches?.("form") || n.querySelector?.("form"))) {
                  changed = true;
                }
              });
            }
            if (m.type === "attributes" && m.attributeName === "class") {
              if (container.classList.contains("popup_active")) changed = true;
            }
          });
          if (changed) {
            log("üîé –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ:", container);
            initIn(container);
            // –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –ø–æ–ø–∞–ø–∞ ‚Äî –µ—Å–ª–∏ —Ç–æ–∫–µ–Ω —Å—Ç–∞—Ä—ã–π, –æ–±–Ω–æ–≤–∏–º
            if (!TokenCache.fresh()) {
              obtainToken(CONFIG.actions.modal, (t) => setTokenToForms(t, container));
            }
          }
        });
        obs.observe(container, { childList: true, subtree: true, attributes: true, attributeFilter: ["class"] });
      });
    });
  }

  // --- —Å—Ç–∞—Ä—Ç ---
  document.addEventListener("DOMContentLoaded", () => {
    log("üåê DOM –≥–æ—Ç–æ–≤ (lite)");
    // –õ–µ–Ω–∏–≤–∞—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞: —Ç–æ–ª—å–∫–æ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
    CONFIG.containers.forEach(sel => $$(sel).forEach(initIn));
    setupObservers();

    // –ï—Å–ª–∏ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –≤–∏–¥–∏–º—É—é —Ñ–æ—Ä–º—É ‚Äî ¬´–ø—Ä–æ–≥—Ä–µ–µ–º¬ª —Ç–æ–∫–µ–Ω –æ–¥–∏–Ω —Ä–∞–∑ –ø–æ idle
    const hasVisibleForm = getForms(document).some(f => f.offsetParent !== null);
    if (hasVisibleForm) {
      obtainToken(CONFIG.actions.idle, (t) => setTokenToForms(t));
    }

    // –ü–∞—É–∑–∞, –µ—Å–ª–∏ –≤–∫–ª–∞–¥–∫–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞
    document.addEventListener("visibilitychange", () => {
      if (document.visibilityState === "visible" && !TokenCache.fresh()) {
        log("üëÅ –≤–∫–ª–∞–¥–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∞—Å—å ‚Üí –æ–±–Ω–æ–≤–∏–º token");
        obtainToken(CONFIG.actions.idle, (t) => setTokenToForms(t));
      }
    });
  });
})();
